name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      run: |
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä–∫—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Test imports
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -c "import config.settings; print('‚úÖ Settings imported successfully')"
        python -c "from parsers import *; print('‚úÖ All parsers imported successfully')"
        python -c "from search_engine import SearchEngine; print('‚úÖ Search engine imported successfully')"
        python -c "from telegram_search_bot import TelegramSearchBot; print('‚úÖ Telegram bot imported successfully')"
    
    - name: Test configuration
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -c "
        from config.settings import *
        assert SEARCH_INTERVAL_HOURS == 0, 'Auto search should be disabled'
        assert REQUEST_DELAY_SECONDS == 20, 'Request delay should be 20 seconds'
        assert MAX_RESULTS == 3, 'Max results should be 3'
        print('‚úÖ Configuration tests passed')
        "
    
    - name: Test parser initialization
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -c "
        from parsers.pitergsm_parser import PiterGSMParser
        from parsers.world_devices_parser import WorldDevicesParser
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–æ–≤
        pitergsm = PiterGSMParser()
        world_devices = WorldDevicesParser()
        
        assert pitergsm.store_name == 'PiterGSM'
        assert world_devices.store_name == 'World Devices'
        print('‚úÖ Parser initialization tests passed')
        "
    
    - name: Test search engine initialization
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -c "
        from search_engine import SearchEngine
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        engine = SearchEngine()
        assert hasattr(engine, 'parsers'), 'Search engine should have parsers'
        print('‚úÖ Search engine initialization test passed')
        "
    
    - name: Test web interface
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from web_interface.app import app
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        assert app is not None, 'Flask app should be created'
        print('‚úÖ Web interface test passed')
        "
    
    - name: Run pytest tests
      env:
        TELEGRAM_BOT_TOKEN: "test_token"
        TELEGRAM_CHAT_ID: "123456789"
      run: |
        python -m pytest tests/ -v

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -ll
    
    - name: Check for known security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        safety check

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t tech-search-bot:test .
        echo "‚úÖ Docker image built successfully"
    
    - name: Test Docker image
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
        docker run --rm tech-search-bot:test python -c "print('‚úÖ Docker container test passed')"

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment file
      run: |
        echo "TELEGRAM_BOT_TOKEN=test_token" > .env
        echo "TELEGRAM_CHAT_ID=123456789" >> .env
    
    - name: Test main entry points
      run: |
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        python main.py --help
        python -c "from telegram_search_bot import main; print('‚úÖ Telegram bot entry point OK')"
        python -c "from web_interface.app import app; print('‚úÖ Web interface entry point OK')"
    
    - name: Test parser functionality (without network)
      run: |
        python -c "
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã –±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        from parsers.base_parser import BaseParser
        
        class TestParser(BaseParser):
            def __init__(self):
                super().__init__('Test Store')
            
            def search_products(self, query):
                return []
        
        parser = TestParser()
        assert parser.store_name == 'Test Store'
        print('‚úÖ Parser functionality test passed')
        "

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Deploy notification
      run: |
        echo "üöÄ Deployment would happen here"
        echo "‚úÖ All tests passed - ready for deployment"
