#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: PiterGSM –∏ World Devices
"""

import sys
import os
import time
sys.path.append('.')

from parsers.pitergsm_parser import PiterGSMParser
from parsers.world_devices_parser import WorldDevicesParser

def test_parser(parser_class, parser_name, test_query="iPhone 15 PRO 256gb"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {parser_name}...")
    print("-" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
        parser = parser_class()
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä {parser_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print(f"üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{test_query}'")
        start_time = time.time()
        
        results = parser.search_products(test_query)
        
        end_time = time.time()
        search_time = end_time - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
        
        if results:
            print("üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            for i, product in enumerate(results):
                print(f"  {i+1}. {product.get('title', 'N/A')}")
                print(f"     üí∞ –¶–µ–Ω–∞: {product.get('price', 'N/A')} —Ä—É–±.")
                print(f"     üè™ –ú–∞–≥–∞–∑–∏–Ω: {product.get('store', 'N/A')}")
                print(f"     üîó –°—Å—ã–ª–∫–∞: {product.get('link', 'N/A')[:60]}...")
                print()
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        return {
            'name': parser_name,
            'status': 'success',
            'results_count': len(results),
            'search_time': search_time,
            'results': results
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ {parser_name}: {e}")
        return {
            'name': parser_name,
            'status': 'error',
            'error': str(e),
            'results_count': 0,
            'search_time': 0
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    print("=" * 60)
    
    # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
    parsers_to_test = [
        (PiterGSMParser, "PiterGSM"),
        (WorldDevicesParser, "World Devices")
    ]
    
    test_query = "iPhone 15 PRO 256gb"
    print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query}'")
    
    results = []
    
    for parser_class, parser_name in parsers_to_test:
        result = test_parser(parser_class, parser_name, test_query)
        results.append(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(3)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    working_parsers = []
    broken_parsers = []
    
    for result in results:
        if result['status'] == 'success':
            working_parsers.append(result)
            if result['results_count'] > 0:
                print(f"‚úÖ {result['name']}: {result['results_count']} —Ç–æ–≤–∞—Ä–æ–≤ ({result['search_time']:.1f}—Å)")
            else:
                print(f"‚ö†Ô∏è {result['name']}: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ({result['search_time']:.1f}—Å)")
        else:
            broken_parsers.append(result)
            print(f"‚ùå {result['name']}: –û–®–ò–ë–ö–ê - {result['error']}")
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(working_parsers)}")
    print(f"‚ùå –°–ª–æ–º–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(broken_parsers)}")
    
    if broken_parsers:
        print(f"\nüîß –ü–∞—Ä—Å–µ—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        for parser in broken_parsers:
            print(f"  - {parser['name']}: {parser['error']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä—Å–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç —Ç–æ–≤–∞—Ä—ã
    finding_parsers = [p for p in working_parsers if p['results_count'] > 0]
    if finding_parsers:
        print(f"\nüèÜ –ü–∞—Ä—Å–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç —Ç–æ–≤–∞—Ä—ã:")
        for parser in finding_parsers:
            print(f"  ‚úÖ {parser['name']}: {parser['results_count']} —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print(f"\n‚ö†Ô∏è –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç —Ç–æ–≤–∞—Ä—ã. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã.")

if __name__ == "__main__":
    main()
