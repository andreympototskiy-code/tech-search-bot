#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ PiterGSM –∏ World Devices
"""

import sys
import os
sys.path.append('.')

from parsers.pitergsm_parser import PiterGSMParser
from parsers.world_devices_parser import WorldDevicesParser
import requests
from bs4 import BeautifulSoup

def debug_world_devices():
    """–û—Ç–ª–∞–¥–∫–∞ World Devices"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ World Devices")
    print("=" * 50)
    
    parser = WorldDevicesParser()
    query = "iPhone 15 PRO 256gb"
    search_url = f"https://world-devices.ru/search/?search={query}&description=true"
    
    response = parser.get_page(search_url)
    if not response:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    product_elements = soup.select('.product-layout')
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ .product-layout: {len(product_elements)}")
    
    if product_elements:
        first_product = product_elements[0]
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        print(f"HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {str(first_product)[:300]}...")
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        links = first_product.find_all('a')
        print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
        for i, link in enumerate(links):
            href = link.get('href', '')
            text = link.get_text(strip=True)
            print(f"  {i+1}. href='{href}' text='{text[:40]}...'")
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = first_product.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        print(f"\nüìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(headers)}")
        for i, header in enumerate(headers):
            text = header.get_text(strip=True)
            print(f"  {i+1}. <{header.name}> {text}")
        
        # –ò—â–µ–º —Ü–µ–Ω—ã
        price_texts = first_product.find_all(text=lambda text: text and ('—Ä.' in str(text) or '—Ä—É–±' in str(text)))
        print(f"\nüí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω: {len(price_texts)}")
        for i, price in enumerate(price_texts):
            print(f"  {i+1}. {price}")

def debug_pitergsm():
    """–û—Ç–ª–∞–¥–∫–∞ PiterGSM"""
    print("\nüîç –û—Ç–ª–∞–¥–∫–∞ PiterGSM")
    print("=" * 50)
    
    parser = PiterGSMParser()
    query = "iPhone 15 PRO 256gb"
    search_url = f"https://pitergsm.ru/?digiSearch=true&term={query}&params=%7Csort%3DDEFAULT"
    
    response = parser.get_page(search_url)
    if not response:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
    print(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {soup.find('title').get_text() if soup.find('title') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    product_selectors = [
        '.product-item',
        '.product-card',
        '.product-layout',
        '.item',
        '[data-product]',
        '.goods-item'
    ]
    
    for selector in product_selectors:
        elements = soup.select(selector)
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ '{selector}': {len(elements)}")
        if elements and len(elements) > 0:
            print(f"  –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {str(elements[0])[:200]}...")
    
    # –ò—â–µ–º –ª—é–±—ã–µ div —Å –∫–ª–∞—Å—Å–∞–º–∏
    all_divs = soup.find_all('div', class_=True)
    print(f"\nüîç –í—Å–µ–≥–æ div —Å –∫–ª–∞—Å—Å–∞–º–∏: {len(all_divs)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
    class_counts = {}
    for div in all_divs:
        for cls in div.get('class', []):
            class_counts[cls] = class_counts.get(cls, 0) + 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã
    sorted_classes = sorted(class_counts.items(), key=lambda x: x[1], reverse=True)
    print("üìä –¢–æ–ø-10 –∫–ª–∞—Å—Å–æ–≤ div:")
    for cls, count in sorted_classes[:10]:
        print(f"  {cls}: {count}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    debug_world_devices()
    debug_pitergsm()

if __name__ == "__main__":
    main()



