#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫–∏
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram import Update, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from search_engine import SearchEngine
from config.settings import TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class TechSearchBot:
    def __init__(self):
        self.search_engine = SearchEngine()
        self.bot_token = TELEGRAM_BOT_TOKEN
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞)
        self.user_states = {}

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
üîç **–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫–∏**

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.

üìù **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–ø–∏—à–∏—Ç–µ `—á—Ç–æ –∏—â–µ–º` –∏–ª–∏ `–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞`
2. –Ø –ø–æ–ø—Ä–æ—à—É –æ–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ iPhone 15 PRO 256gb
‚Ä¢ Dyson Complete Long
‚Ä¢ MacBook Air M2 256gb
‚Ä¢ PlayStation 5
‚Ä¢ Samsung Galaxy S24

üîç **–ú–∞–≥–∞–∑–∏–Ω—ã:**
‚Ä¢ PiterGSM
‚Ä¢ World Devices  
‚Ä¢ GSM Store
‚Ä¢ DNS
‚Ä¢ –ú.–í–∏–¥–µ–æ
‚Ä¢ –≠–ª—å–¥–æ—Ä–∞–¥–æ
‚Ä¢ –°–∏—Ç–∏–ª–∏–Ω–∫

**–ö–æ–º–∞–Ω–¥—ã:**
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫

–ù–∞—á–Ω–∏—Ç–µ —Å `—á—Ç–æ –∏—â–µ–º`! üöÄ
        """

        await update.message.reply_text(welcome_message, parse_mode="Markdown")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

üîç **–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫:**
1. –ù–∞–ø–∏—à–∏—Ç–µ `—á—Ç–æ –∏—â–µ–º` –∏–ª–∏ `–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞`
2. –ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ `iPhone 15 PRO 256gb`
‚Ä¢ `Dyson Complete Long`
‚Ä¢ `MacBook Air M2`
‚Ä¢ `PlayStation 5`

üìä **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
‚Ä¢ –¶–µ–Ω—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö

‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –º–æ–¥–µ–ª—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        """

        await update.message.reply_text(help_message, parse_mode="Markdown")

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        try:
            history = self.search_engine.get_search_history(5)

            if history:
                message = "üìö **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏:**\n\n"

                for search in history:
                    message += f"üîç **{search['query']}**\n"
                    message += f"üìÖ {search['created_at']}\n"
                    message += f"üì¶ {search['results_count']} —Ç–æ–≤–∞—Ä–æ–≤\n\n"

                await update.message.reply_text(message, parse_mode="Markdown")
            else:
                await update.message.reply_text("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤ –ø—É—Å—Ç–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")

    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        user_id = update.effective_user.id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.user_states:
            del self.user_states[user_id]

        await update.message.reply_text(
            "‚ùå **–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            parse_mode="Markdown",
        )

    async def handle_search_request(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE, query_text=None
    ):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫"""
        user_message = query_text or update.message.text.strip()
        user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user_name}: {user_message}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        searching_message = f"""
üîç **–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...**

**–ó–∞–ø—Ä–æ—Å:** {user_message}

‚è≥ –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö...
–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
        """

        status_message = await update.message.reply_text(
            searching_message, parse_mode="Markdown"
        )

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.search_engine.search_all_stores(user_message)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if results["top_results"]:
                response_message = f"""
üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {user_message}**

üìä **–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** {results['total_found']}
‚è∞ **–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:** {datetime.now().strftime('%H:%M:%S')}

üèÜ **–¢–æ–ø {len(results['top_results'])} —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö:**
                """

                for i, result in enumerate(results["top_results"], 1):
                    response_message += f"""
{i}. **{result['title']}**
üí∞ **–¶–µ–Ω–∞:** {result['price']:,} ‚ÇΩ
üè™ **–ú–∞–≥–∞–∑–∏–Ω:** {result['store']}
üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({result['link']})
                    """

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                response_message += "\n\nüìà **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º:**\n"
                for store_name, store_results in results["store_results"].items():
                    response_message += (
                        f"‚Ä¢ {store_name}: {len(store_results)} —Ç–æ–≤–∞—Ä–æ–≤\n"
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await status_message.edit_text(
                    response_message,
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )

            else:
                no_results_message = f"""
‚ùå **–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**

**–ó–∞–ø—Ä–æ—Å:** {user_message}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –¢–æ–≤–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã
                """

                await status_message.edit_text(
                    no_results_message, parse_mode="Markdown"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            error_message = f"""
‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ**

**–ó–∞–ø—Ä–æ—Å:** {user_message}

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """

            await status_message.edit_text(error_message, parse_mode="Markdown")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_message = update.message.text.strip()
        user_message_lower = user_message.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if (
            user_id in self.user_states
            and self.user_states[user_id] == "waiting_for_product"
        ):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª /cancel, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
            if user_message_lower == "/cancel":
                del self.user_states[user_id]
                await update.message.reply_text(
                    "‚ùå **–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω**\n\n"
                    "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
                    parse_mode="Markdown",
                )
                return

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            self.user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self.handle_search_request(update, context, user_message)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
        search_triggers = [
            "—á—Ç–æ –∏—â–µ–º",
            "–∏—â–µ–º",
            "–Ω–∞–π—Ç–∏",
            "–ø–æ–∏—Å–∫",
            "–Ω–∞–π–¥–∏",
            "–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",
        ]

        if any(trigger in user_message_lower for trigger in search_triggers):
            if user_message_lower in ["—á—Ç–æ –∏—â–µ–º", "–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"]:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                self.user_states[user_id] = "waiting_for_product"
                await update.message.reply_text(
                    "üìù **–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏**\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
                    "‚Ä¢ iPhone 15 PRO 256gb\n"
                    "‚Ä¢ Dyson Complete Long\n"
                    "‚Ä¢ MacBook Air M2 256gb\n"
                    "‚Ä¢ PlayStation 5\n"
                    "‚Ä¢ Samsung Galaxy S24\n"
                    "‚Ä¢ AirPods Pro 2\n\n"
                    "üí° **–°–æ–≤–µ—Ç—ã:**\n"
                    "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –º–æ–¥–µ–ª—å –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è",
                    parse_mode="Markdown",
                )
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                await self.handle_search_request(update, context)
        else:
            # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫
            await self.handle_search_request(update, context)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.bot_token).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("history", self.history_command))
        application.add_handler(CommandHandler("cancel", self.cancel_command))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        sys.exit(1)

    bot = TechSearchBot()
    bot.run()


if __name__ == "__main__":
    main()
