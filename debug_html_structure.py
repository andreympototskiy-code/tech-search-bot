#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
"""

import sys
import os
sys.path.append('.')

from parsers.world_devices_parser import WorldDevicesParser
import requests
from bs4 import BeautifulSoup

def debug_html_structure():
    """–û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã World Devices")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = WorldDevicesParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = "iPhone 15 PRO 256gb"
    search_url = f"https://world-devices.ru/search/?search={query}&description=true"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    response = parser.get_page(search_url)
    if not response:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        return
    
    soup = BeautifulSoup(response.text, 'lxml')
    
    # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤
    product_elements = soup.select('.product-layout')
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_elements)}")
    
    if product_elements:
        first_product = product_elements[0]
        print(f"\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        print(f"HTML: {str(first_product)[:500]}...")
        
        print(f"\nüìã –í—Å–µ –∫–ª–∞—Å—Å—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        classes = first_product.get('class', [])
        for cls in classes:
            print(f"  - {cls}")
        
        print(f"\nüîç –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ç–æ–≤–∞—Ä–µ:")
        links = first_product.find_all('a')
        for i, link in enumerate(links):
            href = link.get('href', '')
            text = link.get_text(strip=True)
            print(f"  {i+1}. href='{href}' text='{text[:50]}...'")
        
        print(f"\nüí∞ –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–æ–π:")
        price_elements = first_product.find_all(text=lambda text: text and '—Ä.' in str(text))
        for i, elem in enumerate(price_elements):
            print(f"  {i+1}. {elem}")
        
        print(f"\nüìù –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
        headers = first_product.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        for i, header in enumerate(headers):
            text = header.get_text(strip=True)
            print(f"  {i+1}. <{header.name}> {text}")
        
        print(f"\nüéØ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:")
        selectors_to_test = [
            '.caption h4 a',
            '.caption a',
            'h4 a',
            'a[href]',
            '.product-name',
            '.title',
            '.name'
        ]
        
        for selector in selectors_to_test:
            elements = first_product.select(selector)
            if elements:
                print(f"‚úÖ '{selector}': {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                for elem in elements:
                    text = elem.get_text(strip=True)
                    href = elem.get('href', '')
                    print(f"    - text: '{text[:30]}...' href: '{href[:30]}...'")
            else:
                print(f"‚ùå '{selector}': –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    debug_html_structure()



