#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PiterGSM
"""
import os
import sys
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
os.environ["TELEGRAM_BOT_TOKEN"] = "test_token"
os.environ["TELEGRAM_CHAT_ID"] = "123456789"

from parsers.pitergsm_parser import PiterGSMParser
import requests
import brotli


def debug_pitergsm():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PiterGSM"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PiterGSM")
    print("=" * 60)

    parser = PiterGSMParser()
    test_query = "iPhone 15"
    search_url = parser.get_search_url(test_query)

    print(f"URL –ø–æ–∏—Å–∫–∞: {search_url}")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
    print("\n1. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ requests:")
    try:
        response = requests.get(search_url, headers=parser.session.headers, timeout=15)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"Content-Type: {response.headers.get('content-type')}")
        print(f"Content-Encoding: {response.headers.get('content-encoding')}")
        print(f"Content-Length: {len(response.content)} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∂–∞—Ç–æ –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if response.headers.get("content-encoding") == "br":
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∂–∞—Ç–æ Brotli")
            try:
                decompressed = brotli.decompress(response.content)
                print(f"–ü–æ—Å–ª–µ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {len(decompressed)} –±–∞–π—Ç")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                with open("pitergsm_decompressed.html", "w", encoding="utf-8") as f:
                    f.write(decompressed.decode("utf-8"))
                print(
                    "–î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ pitergsm_decompressed.html"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã
                if (
                    "—Ç–æ–≤–∞—Ä" in decompressed.decode("utf-8").lower()
                    or "product" in decompressed.decode("utf-8").lower()
                ):
                    print("‚úÖ –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã")
                else:
                    print("‚ùå –î–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏: {e}")
        else:
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–∂–∞—Ç–æ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
    print("\n2. –ß–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä:")
    try:
        results = parser.search_products(test_query)
        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")

        if results:
            print("–ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞:")
            for i, product in enumerate(results[:3], 1):
                print(f"  {i}. {product['title']} - {product['price']} —Ä—É–±.")
        else:
            print("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    debug_pitergsm()
